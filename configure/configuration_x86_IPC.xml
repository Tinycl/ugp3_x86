<?xml version="1.0" encoding="utf-8"?>
<!-- 
Copyright 2019 ARM Ltd. and University of Cyprus
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<GA_inputs>
  <general_inputs>


    <!--General GA inputs-->

    <loopSize value="50"/>
    <!--The size in instructions of the generated code sequences-->
    <population_size value="50"/>
    <!-- The size of each population - generation-->
    <mutation_rate value="0.02"/>
    <!-- each instruction will have this probability to be mutated (changed to something else)-->
    <crossover_type value="1"/>
    <!--0 for uniform crossover, 1 for one point crossover. This is a good article that explains the crossover types http://en.wikipedia.org/wiki/Crossover_(genetic_algorithm). I have implemented 
only two crossover types the uniform and the 1 point. For generating stress tests I found that 1 point crossover is better since strong instructions sequences have higher chance to survive-->
    <crossover_rate value="1.0"/>
    <!--The chance two parent two recombine.. usually is a very high percentage-->
    <uniform_rate value="0.5"/>
    <!--Only used when uniform crossover is set... The chance for each instruction to be crossovered-->

    <populations_to_run value="1000"/>
    <ellitism value="true"/>
    <!--
 true or false. If true the best individual is promoted to the next generation. I think keeping this to "true" is good choice
-->
    <selectionMethod value="0"/>
    <!--
 0 for tournament 1 for wheel selection. Only those two are implemented... wheel selection doesn't work really well so I propose tournament. If you want to learn about wheel selection here http://en.wikipedia.org/wiki/Fitness_proportionate_selection
-->
    <tournament_size value="5"/>
    <!--
Only useful with tournament selection. 5 worked well for me but sure feel free to play with this variable more here http://en.wikipedia.org/wiki/Tournament_selection 
-->
    <save_whole_source value="1"/>
    <!--
 choose whether to save the whole individual src code or just the loop instructions.. saving the whole source takes ~4X more disk space but is also more convenient 
-->
    <!--
 when this is 0 to reproduce the src code of an individual copy paste the loop instructions into the template source file (main_original.s) located in compilationDir
-->
    <measurementClass value="MeasurementIPC"/>
    <!--
Enter the name in the class located in the src\Measurement folder that will be used for measurements
-->
    <measurementClassConfFile value="IPC"/>
    <!--
 enter the name of the configuraiton file for the measurement class.. the file must be located in configurationFiles/measurement directory
-->

    <fitnessClass value="DefaultFitness"/>
    <!--
Enter the name of the class located in the src\Fitness folder that will be used for calculating the fitness of individuals
-->
    <instruction_percentage_clue value="False"/>
    <!-- your initial population will start with a fix number of different instruction types e.g. 50% neon 25% mem and 25% short latency.. If you know a good instruction mix it may
     speedup the algorithm convergence. True/False case-sensitive-->

    <!-- end of general GA inputs -->
    <!-- End of Register and memory initialization -->
    <!-- Input/output dir -->

    <!--end of general GA inputs-->


    <!--Input/output dir-->
    <dirToSaveResults value="/media/tiny/2TB/vector/gest/test/" />
    <!-- The code sequeneces will be save in ascii format in .txt files in the specified dir. The name format of each file goes like this populationNumber_individualsIdNumber_fitnessValue_measurement1_.... Also a dir which is named
    after the date/time of the start of the run is created. This dir will contain each population saved in .pkl file and the rand state (also in .pkl format) at each population. This dir can be used as seed dir in case you want to continue an unfinished run. 
    Also the contents of this dir can be used for parsing results. The parseGeneticResults.py is an example of how to parse the population files and get statistics -->

    <seedDir value="" />
    <!--Use the seedDir if you only want to begin algorithm from some specific indivduals instead of random population. In case you don't want to use this just put "". Otherwise point to the dir that contains the pkl files.. look the dirToSaveResults attribute for more details -->



    <compilationDir value="/media/tiny/2TB/github/GeST/assembly_compilation_x86_gcc/" />
    <!-- Dir where the compilation code is located .. IMPORTANT the main_original.s must always contain a line #loop_code. At that line
      the framework will bring in the generated code sequence.. In main_original.s and startup_original.s you can place all the code that you want to be common between each individual e.g. memory and register initialization... 
      Actually the only thing that will differ among each individual run
      should be the individual's code sequence which is placed under the "#loop_code" line-->

    <!--End of Input/output dir-->



    <run_type value="0">
    </run_type>
    <!--Ignore this input. You should have it always at zero.-->

  </general_inputs>

  <instruction_types>    <!--Specify intruction types and how much will be the amount of each type in the loop.. The percentage will be considered only if the instruction_percentage_clue is set to "True"-->

    <!-- how much percentage of each kind of instructions type the loop will consist of.. -->
    <instruction_type id="shortLat" perc="0.30" />

    <instruction_type id="longLat" perc="0.02" />

    <instruction_type id="neonVfp" perc="0.0" />

    <instruction_type id="floatingPoint" perc="0.38" />

    <instruction_type id="intMem" perc="0.15" />

    <instruction_type id="branch" perc="0.01" />


  </instruction_types>

  <instructions_operands>


    <!-- In this section you define all operands that are going to be used by the instructions.. In this section you must define different type of registers e.g. integer registers and float register, branch labels
    immediate values and memory subscripts.. Basically you must define whatever comes after an instruction name and you want to be touched by the evolution process of the algorithm-->

    <!--For each operand you must define an id.. the possible values the operand can take.. and the type of operand... 
    the algorithm understands and treats differently 3 types of operands 
    1)registers, 2)constant values(e.g. #4 in LDR x0,[x1,#4]), and 3) immediate values (same thing as constant values)
    The type must be specified in the type attribute ath the operand definition (examples below)
    
    The immediate/constant operand's values can be specified with the min max and stride parameters
        
        <operand id="mem_address_subscript" min="0" max="4092" stride="4" type="constant" toggle="False">
    </operand>
   
   while registers are specified through values parameter e.g.
   
          <operand id="simd_register" values="v0.4s v1.4s v2.4s v3.4s v4.4s v5.4s v6.4s v7.4s v8.4s v9.4s v10.4s v11.4s" type="register" toggle="False">
    </operand>
   
    Toggling flag is broken don't use it
    
    -->


    <operand id="integer_register" values="%rax %rbx %rdx %rsi %rdi" type="register" toggle="False">
    </operand>

    <operand id="gpr_8_r" values="%ah %al %bh %bl %ch %cl %dh %dl %sil %dil %bpl %spl %r8b %r9b %r10b %r11b %r12b %r13b %r14b %r15b" type="register" toggle="False">
    </operand>
    <operand id="gpr_8_adc_r" values=" %al  %bl  %cl  %dl %sil %dil %bpl %spl %r8b %r9b %r10b %r11b %r12b %r13b %r14b %r15b" type="register" toggle="False">
    </operand>

    <operand id="gpr_16_r" values="%ax %bx %cx %dx %si %di %bp %sp %r8w %r9w %r10w %r11w %r12w %r13w %r14w %r15w" type="register" toggle="False">
    </operand>

    <operand id="gpr_32_r" values="%eax %ebx %ecx %edx %esi %edi %ebp %esp %r8d %r9d %r10d %r11d %r12d %r13d %r14d %r15d" type="register" toggle="False">
    </operand>

    <operand id="gpr_64_r" values="%rax %rbx %rcx %rdx %rsi %rdi %rbp %rsp %r8 %r9 %r10 %r11 %r12 %r13 %r14 %r15" type="register" toggle="False">
    </operand>

    <operand id="bnd_r" values="%bnd0 %bnd1 %bnd2 %bnd3" type="register" toggle="False">
    </operand>

    <operand id="sse_xmm_r" values="%xmm0 %xmm1 %xmm2 %xmm3 %xmm4 %xmm5 %xmm6 %xmm7" type="register" toggle="False"> </operand>
    <operand id="xmm0_r" values="%xmm0" type="register" toggle="False"> </operand>
    <operand id="avx_xmm_r" values="%xmm0 %xmm1 %xmm2 %xmm3 %xmm4 %xmm5 %xmm6 %xmm7 %xmm8 %xmm9 %xmm10 %xmm11 %xmm12 %xmm13 %xmm14 %xmm15" type="register" toggle="False">
    </operand>

    <operand id="avx_ymm_r" values="%ymm0 %ymm1 %ymm2 %ymm3 %ymm4 %ymm5 %ymm6 %ymm7 %ymm8 %ymm9 %ymm10 %ymm11 %ymm12 %ymm13 %ymm14 %ymm15" type="register" toggle="False">
    </operand>

    <operand id="avx2_ymm_r" values="%ymm0 %ymm1 %ymm2 %ymm3 %ymm4 %ymm5 %ymm6 %ymm7 %ymm8 %ymm9 %ymm10 %ymm11 %ymm12 %ymm13 %ymm14 %ymm15" type="register" toggle="False">
    </operand>

    <operand id="imm_value" min="0" max="2147483647" stride="71582785" type="constant" toggle="False">
    </operand>

    <operand id="shift_value" min="31" max="31" stride="1" type="constant" toggle="False">
    </operand>

    <operand id="u_imm8" min="0" max="255" stride="8" type="constant" toggle="False">
    </operand>
    <operand id="s_imm8" min="-128" max="127" stride="8" type="constant" toggle="False">
    </operand>

    <operand id="u_imm16" min="0" max="65535" stride="1024" type="constant" toggle="False">
    </operand>
    <operand id="s_imm16" min="-32768" max="32767" stride="1024" type="constant" toggle="False">
    </operand>

    <operand id="u_imm32" min="0" max="2147483647" stride="71582785" type="constant" toggle="False">
    </operand>
    <operand id="s_imm32" min="-2147483648" max="2147483647" stride="71582785" type="constant" toggle="False">
    </operand>


    <operand id="mem_offset" min="4" max="128" stride="4" type="constant" toggle="False"> </operand>

    <operand id="mem8" min="8" max="128" stride="8" type="constant" toggle="False"> </operand>
    <operand id="mem16" min="16" max="256" stride="16" type="constant" toggle="False"> </operand>
    <operand id="mem32" min="32" max="512" stride="32" type="constant" toggle="False"> </operand>
    <operand id="mem64" min="64" max="512" stride="64" type="constant" toggle="False"> </operand>
    <operand id="mem128" min="128" max="1024" stride="128" type="constant" toggle="False"> </operand>
    <operand id="mem256" min="256" max="2048" stride="256" type="constant" toggle="False"> </operand>

    <operand id="branch_label_increment_rel8" min="-3" max="5" stride="1" type="automatically_incremented_operand" toggle="False">
    </operand>

  </instructions_operands>

  <instructions>

    <!--In this section you will specify the instructions you want the framework to use in the optimization
    process.. -->

    <!-- Lets understand how to decalare an instruction by explaining the following example
    
       <instruction name="ADD" num_of_operands="3" type="shortLat" operand1="integer_register" operand2="integer_register" operand3="integer_register" format="ADD op1,op2,op3" toggle="False">
    </instruction> 
    
     The name attribute is basically the unique indentifier of this instruction, usually you will be fine by just putting the instruction name (like in the example ADD)... 
    The num of operands and type attributes are pretty auto-explainable
    Note that each instruction must belong to an instruction type which was defined in the instruction_type section. As you can see in the example the instruction belongs to shortLatency instruction type
    
    For operand1, operand2 and etc you must specify an operand id that exists in the instructions_operands section.. 
    In the format attribute put the string that represents the syntax of the instruction. op1, op2 and op3 point out to the place where each instruction's operand should be. 
    don't bother with toggle attribute is broken
    -->

    <!-- op is revise -->
    <!-- Jcc instructions -->
    <!--
    <instruction name="JA_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="ja op1" toggle="False">
    </instruction>
    <instruction name="JAE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jae op1" toggle="False">
    </instruction>
    <instruction name="JB_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jb op1" toggle="False">
    </instruction>
    <instruction name="JBE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jbe op1" toggle="False">
    </instruction>
    <instruction name="JC_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jc op1" toggle="False">
    </instruction>
    <instruction name="JB_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jb op1" toggle="False">
    </instruction>
    <instruction name="JECXZ_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jecxz op1" toggle="False">
    </instruction>
    <instruction name="JRCXZ_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jrcxz op1" toggle="False">
    </instruction>
    <instruction name="JE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="je op1" toggle="False">
    </instruction>
    <instruction name="JG_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jg op1" toggle="False">
    </instruction>
    <instruction name="JGE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jge op1" toggle="False">
    </instruction>
    <instruction name="JL_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jl op1" toggle="False">
    </instruction>
    <instruction name="JLE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jle op1" toggle="False">
    </instruction>
    <instruction name="JNA_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jna op1" toggle="False">
    </instruction>
    <instruction name="JNAE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnae op1" toggle="False">
    </instruction>
    <instruction name="JNB_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnb op1" toggle="False">
    </instruction>
    <instruction name="JNBE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnbe op1" toggle="False">
    </instruction>
    <instruction name="JNC_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnc op1" toggle="False">
    </instruction>
    <instruction name="JNE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jne op1" toggle="False">
    </instruction>
    <instruction name="JNG_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jng op1" toggle="False">
    </instruction>
    <instruction name="JNGE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnge op1" toggle="False">
    </instruction>
    <instruction name="JNL_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnl op1" toggle="False">
    </instruction>
    <instruction name="JNLE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnle op1" toggle="False">
    </instruction>
    <instruction name="JNO_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jno op1" toggle="False">
    </instruction>
    <instruction name="JNP_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnp op1" toggle="False">
    </instruction>
    <instruction name="JNS_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jns op1" toggle="False">
    </instruction>
    <instruction name="JNZ_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jnz op1" toggle="False">
    </instruction>
    <instruction name="JO_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jo op1" toggle="False">
    </instruction>
    <instruction name="JP_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jp op1" toggle="False">
    </instruction>
    <instruction name="JPE_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jpe op1" toggle="False">
    </instruction>
    <instruction name="JPO_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jpo op1" toggle="False">
    </instruction>
    <instruction name="JS_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="js op1" toggle="False">
    </instruction>
    <instruction name="JZ_rel8" num_of_operands="1" type="branch" operand1="branch_label_increment_rel8" format="jz op1" toggle="False">
    </instruction>
  -->
    <!-- mem instructions -->

    <instruction name="ADD_1stMem" num_of_operands="2" type="intMem" operand1="mem_offset" operand2="integer_register" format="add op1(%rsp),op2" toggle="False">
    </instruction>

    <instruction name="ADD_2ndMem" num_of_operands="2" type="intMem" operand1="integer_register" operand2="mem_offset" format="add op1,op2(%rsp)" toggle="False">
    </instruction>

    <instruction name="MUL_1stMem" num_of_operands="2" type="intMem" operand1="mem_offset" operand2="integer_register" format="imul op1(%rsp),op2" toggle="False">
    </instruction>

    <instruction name="MOV_1stMem" num_of_operands="2" type="intMem" operand1="mem_offset" operand2="integer_register" format="mov op1(%rsp),op2" toggle="False">
    </instruction>

    <instruction name="MOV_2ndMem" num_of_operands="2" type="intMem" operand1="integer_register" operand2="mem_offset" format="mov op1,op2(%rsp)" toggle="False">
    </instruction>


    <!-- integer  instructions -->





    <instruction name="SHL" num_of_operands="2" type="shortLat" format="shl $op1,op2" operand1="shift_value" operand2="integer_register" toggle="False">
    </instruction>

    <instruction name="SAR" num_of_operands="2" type="shortLat" format="sar $op1,op2" operand1="shift_value" operand2="integer_register" toggle="False">
    </instruction>


    <instruction name="ROR" num_of_operands="2" type="shortLat" format="ror $op1,op2" operand1="shift_value" operand2="integer_register" toggle="False">
    </instruction>


    <instruction name="MOV" num_of_operands="2" type="shortLat" format="mov op1,op2" operand1="integer_register" operand2="integer_register" toggle="False">
    </instruction>


    <instruction name="CMP" num_of_operands="2" type="shortLat" format="cmp op1,op2" operand1="integer_register" operand2="integer_register" toggle="False">
    </instruction>

    <!-- intel floating point -->

    <!-- legacy -->
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb $op2,op1" operand1="gpr_8_r" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb $op2,op1" operand1="gpr_8_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw $op2,op1" operand1="gpr_16_r" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw $op2,op1" operand1="gpr_16_r" operand2="s_imm16" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl $op2,op1" operand1="gpr_32_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl $op2,op1" operand1="gpr_32_r" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq $op2,op1" operand1="gpr_64_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq $op2,op1" operand1="gpr_64_r" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb $op2,op1(%rsp)" operand1="mem8" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb $op2,op1(%rsp)" operand1="mem8" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw $op2,op1(%rsp)" operand1="mem16" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm16" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl $op2,op1(%rsp)" operand1="mem32" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq $op2,op1(%rsp)" operand1="mem64" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb op2,op1" operand1="gpr_8_adc_r" operand2="gpr_8_adc_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb op2,op1(%rsp)" operand1="mem8" operand2="gpr_8_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcb op2(%rsp),op1" operand1="gpr_8_r" operand2="mem8" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcw op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="ADC" num_of_operands="2" type="legacy" format="adcq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb $op2,op1" operand1="gpr_8_r" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb $op2,op1" operand1="gpr_8_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw $op2,op1" operand1="gpr_16_r" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw $op2,op1" operand1="gpr_16_r" operand2="s_imm16" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl $op2,op1" operand1="gpr_32_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl $op2,op1" operand1="gpr_32_r" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq $op2,op1" operand1="gpr_64_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq $op2,op1" operand1="gpr_64_r" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb $op2,op1(%rsp)" operand1="mem8" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb $op2,op1(%rsp)" operand1="mem8" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw $op2,op1(%rsp)" operand1="mem16" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm16" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl $op2,op1(%rsp)" operand1="mem32" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq $op2,op1(%rsp)" operand1="mem64" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb op2,op1" operand1="gpr_8_adc_r" operand2="gpr_8_adc_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb op2,op1(%rsp)" operand1="mem8" operand2="gpr_8_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addb op2(%rsp),op1" operand1="gpr_8_r" operand2="mem8" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addw op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="ADD" num_of_operands="2" type="legacy" format="addq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    
    <instruction name="ADOX" num_of_operands="2" type="legacy" format="adoxl op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="ADOX" num_of_operands="2" type="legacy" format="adoxl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="ADOX" num_of_operands="2" type="legacy" format="adoxq op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="ADOX" num_of_operands="2" type="legacy" format="adoxq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="AND" num_of_operands="2" type="legacy" format="andb $op2,op1" operand1="gpr_8_r" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andb $op2,op1" operand1="gpr_8_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw $op2,op1" operand1="gpr_16_r" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw $op2,op1" operand1="gpr_16_r" operand2="s_imm16" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl $op2,op1" operand1="gpr_32_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl $op2,op1" operand1="gpr_32_r" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq $op2,op1" operand1="gpr_64_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq $op2,op1" operand1="gpr_64_r" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andb $op2,op1(%rsp)" operand1="mem8" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andb $op2,op1(%rsp)" operand1="mem8" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw $op2,op1(%rsp)" operand1="mem16" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm16" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl $op2,op1(%rsp)" operand1="mem32" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq $op2,op1(%rsp)" operand1="mem64" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andb op2,op1" operand1="gpr_8_adc_r" operand2="gpr_8_adc_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andb op2,op1(%rsp)" operand1="mem8" operand2="gpr_8_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andb op2(%rsp),op1" operand1="gpr_8_r" operand2="mem8" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andw op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="AND" num_of_operands="2" type="legacy" format="andq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BSF" num_of_operands="2" type="legacy" format="bsf op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BSF" num_of_operands="2" type="legacy" format="bsfw op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="BSF" num_of_operands="2" type="legacy" format="bsf op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BSF" num_of_operands="2" type="legacy" format="bsfl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="BSF" num_of_operands="2" type="legacy" format="bsf op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BSF" num_of_operands="2" type="legacy" format="bsfq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>


    <instruction name="BSR" num_of_operands="2" type="legacy" format="bsr op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BSR" num_of_operands="2" type="legacy" format="bsrw op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="BSR" num_of_operands="2" type="legacy" format="bsr op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BSR" num_of_operands="2" type="legacy" format="bsrl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="BSR" num_of_operands="2" type="legacy" format="bsr op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BSR" num_of_operands="2" type="legacy" format="bsrq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BSWAP" num_of_operands="1" type="legacy" format="bswap op1" operand1="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BSWAP" num_of_operands="1" type="legacy" format="bswap op1" operand1="gpr_64_r" toggle="False"> </instruction>

    <instruction name="BT" num_of_operands="2" type="legacy" format="bt op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="btw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="bt op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="btl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="bt op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="btq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="bt $op2,op1" operand1="gpr_16_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="btw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="bt op2,op1" operand1="gpr_32_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="btl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="bt $op2,op1" operand1="gpr_64_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BT" num_of_operands="2" type="legacy" format="btq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm8" toggle="False"> </instruction>

    <instruction name="BTC" num_of_operands="2" type="legacy" format="btc op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btcw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btc op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btcl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btc op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btcq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btc $op2,op1" operand1="gpr_16_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btcw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btc $op2,op1" operand1="gpr_32_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btcl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btc $op2,op1" operand1="gpr_64_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTC" num_of_operands="2" type="legacy" format="btcq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm8" toggle="False"> </instruction>

    <instruction name="BTR" num_of_operands="2" type="legacy" format="btr op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btrw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btr op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btrl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btr op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btrq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btr $op2,op1" operand1="gpr_16_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btrw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btr $op2,op1" operand1="gpr_32_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btrl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btr $op2,op1" operand1="gpr_64_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTR" num_of_operands="2" type="legacy" format="btrq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm8" toggle="False"> </instruction>

    <instruction name="BTS" num_of_operands="2" type="legacy" format="bts op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="btsw op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="bts op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="btsl op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="bts op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="btsq op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="bts $op2,op1" operand1="gpr_16_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="btsw $op2,op1(%rsp)" operand1="mem16" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="bts $op2,op1" operand1="gpr_32_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="btsl $op2,op1(%rsp)" operand1="mem32" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="bts $op2,op1" operand1="gpr_64_r" operand2="s_imm8" toggle="False"> </instruction>
    <instruction name="BTS" num_of_operands="2" type="legacy" format="btsq $op2,op1(%rsp)" operand1="mem64" operand2="s_imm8" toggle="False"> </instruction>

    <!-- 
      call 
      cli
      clrssbsy
      clts
      cmc
      cldemote
    -->

    <instruction name="CBW" num_of_operands="0" type="legacy" format="cbw" toggle="False"> </instruction>
    <instruction name="CWDE" num_of_operands="0" type="legacy" format="cwde" toggle="False"> </instruction>
    <instruction name="CDQE" num_of_operands="0" type="legacy" format="cdqe" toggle="False"> </instruction>

    <instruction name="CLC" num_of_operands="0" type="legacy" format="clc" toggle="False"> </instruction>
    <instruction name="CLD" num_of_operands="0" type="legacy" format="cld" toggle="False"> </instruction>

    <instruction name="CLFLUSH" num_of_operands="1" type="legacy" format="clflush op1(%rsp)" operand1="mem8" toggle="False"> </instruction>
    <instruction name="CLFLUSHOPT" num_of_operands="1" type="legacy" format="clflushopt op1(%rsp)" operand1="mem8" toggle="False"> </instruction>
    <instruction name="CLWB" num_of_operands="1" type="legacy" format="clwb op1(%rsp)" operand1="mem8" toggle="False"> </instruction>


    <instruction name="CMOVA" num_of_operands="2" type="legacy" format="cmova op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVA" num_of_operands="2" type="legacy" format="cmova op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVA" num_of_operands="2" type="legacy" format="cmova op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVA" num_of_operands="2" type="legacy" format="cmova op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVA" num_of_operands="2" type="legacy" format="cmova op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVA" num_of_operands="2" type="legacy" format="cmova op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVAE" num_of_operands="2" type="legacy" format="cmovae op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVAE" num_of_operands="2" type="legacy" format="cmovae op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVAE" num_of_operands="2" type="legacy" format="cmovae op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVAE" num_of_operands="2" type="legacy" format="cmovae op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVAE" num_of_operands="2" type="legacy" format="cmovae op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVAE" num_of_operands="2" type="legacy" format="cmovae op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVB" num_of_operands="2" type="legacy" format="cmovb op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVB" num_of_operands="2" type="legacy" format="cmovb op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVB" num_of_operands="2" type="legacy" format="cmovb op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVB" num_of_operands="2" type="legacy" format="cmovb op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVB" num_of_operands="2" type="legacy" format="cmovb op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVB" num_of_operands="2" type="legacy" format="cmovb op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVBE" num_of_operands="2" type="legacy" format="cmovbe op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVBE" num_of_operands="2" type="legacy" format="cmovbe op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVBE" num_of_operands="2" type="legacy" format="cmovbe op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVBE" num_of_operands="2" type="legacy" format="cmovbe op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVBE" num_of_operands="2" type="legacy" format="cmovbe op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVBE" num_of_operands="2" type="legacy" format="cmovbe op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVC" num_of_operands="2" type="legacy" format="cmovc op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVC" num_of_operands="2" type="legacy" format="cmovc op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVC" num_of_operands="2" type="legacy" format="cmovc op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVC" num_of_operands="2" type="legacy" format="cmovc op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVC" num_of_operands="2" type="legacy" format="cmovc op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVC" num_of_operands="2" type="legacy" format="cmovc op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVE" num_of_operands="2" type="legacy" format="cmove op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVE" num_of_operands="2" type="legacy" format="cmove op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVE" num_of_operands="2" type="legacy" format="cmove op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVE" num_of_operands="2" type="legacy" format="cmove op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVE" num_of_operands="2" type="legacy" format="cmove op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVE" num_of_operands="2" type="legacy" format="cmove op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVG" num_of_operands="2" type="legacy" format="cmovg op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVG" num_of_operands="2" type="legacy" format="cmovg op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVG" num_of_operands="2" type="legacy" format="cmovg op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVG" num_of_operands="2" type="legacy" format="cmovg op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVG" num_of_operands="2" type="legacy" format="cmovg op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVG" num_of_operands="2" type="legacy" format="cmovg op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVGE" num_of_operands="2" type="legacy" format="cmovge op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVGE" num_of_operands="2" type="legacy" format="cmovge op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVGE" num_of_operands="2" type="legacy" format="cmovge op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVGE" num_of_operands="2" type="legacy" format="cmovge op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVGE" num_of_operands="2" type="legacy" format="cmovge op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVGE" num_of_operands="2" type="legacy" format="cmovge op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVL" num_of_operands="2" type="legacy" format="cmovl op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVL" num_of_operands="2" type="legacy" format="cmovl op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVL" num_of_operands="2" type="legacy" format="cmovl op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVL" num_of_operands="2" type="legacy" format="cmovl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVL" num_of_operands="2" type="legacy" format="cmovl op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVL" num_of_operands="2" type="legacy" format="cmovl op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVLE" num_of_operands="2" type="legacy" format="cmovle op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVLE" num_of_operands="2" type="legacy" format="cmovle op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVLE" num_of_operands="2" type="legacy" format="cmovle op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVLE" num_of_operands="2" type="legacy" format="cmovle op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVLE" num_of_operands="2" type="legacy" format="cmovle op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVLE" num_of_operands="2" type="legacy" format="cmovle op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNA" num_of_operands="2" type="legacy" format="cmovna op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNA" num_of_operands="2" type="legacy" format="cmovna op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNA" num_of_operands="2" type="legacy" format="cmovna op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNA" num_of_operands="2" type="legacy" format="cmovna op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNA" num_of_operands="2" type="legacy" format="cmovna op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNA" num_of_operands="2" type="legacy" format="cmovna op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNAE" num_of_operands="2" type="legacy" format="cmovnae op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNAE" num_of_operands="2" type="legacy" format="cmovnae op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNAE" num_of_operands="2" type="legacy" format="cmovnae op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNAE" num_of_operands="2" type="legacy" format="cmovnae op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNAE" num_of_operands="2" type="legacy" format="cmovnae op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNAE" num_of_operands="2" type="legacy" format="cmovnae op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNB" num_of_operands="2" type="legacy" format="cmovnb op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNB" num_of_operands="2" type="legacy" format="cmovnb op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNB" num_of_operands="2" type="legacy" format="cmovnb op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNB" num_of_operands="2" type="legacy" format="cmovnb op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNB" num_of_operands="2" type="legacy" format="cmovnb op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNB" num_of_operands="2" type="legacy" format="cmovnb op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNBE" num_of_operands="2" type="legacy" format="cmovnbe op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNBE" num_of_operands="2" type="legacy" format="cmovnbe op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNBE" num_of_operands="2" type="legacy" format="cmovnbe op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNBE" num_of_operands="2" type="legacy" format="cmovnbe op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNBE" num_of_operands="2" type="legacy" format="cmovnbe op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNBE" num_of_operands="2" type="legacy" format="cmovnbe op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNC" num_of_operands="2" type="legacy" format="cmovnc op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNC" num_of_operands="2" type="legacy" format="cmovnc op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNC" num_of_operands="2" type="legacy" format="cmovnc op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNC" num_of_operands="2" type="legacy" format="cmovnc op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNC" num_of_operands="2" type="legacy" format="cmovnc op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNC" num_of_operands="2" type="legacy" format="cmovnc op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNE" num_of_operands="2" type="legacy" format="cmovne op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNE" num_of_operands="2" type="legacy" format="cmovne op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNE" num_of_operands="2" type="legacy" format="cmovne op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNE" num_of_operands="2" type="legacy" format="cmovne op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNE" num_of_operands="2" type="legacy" format="cmovne op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNE" num_of_operands="2" type="legacy" format="cmovne op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNG" num_of_operands="2" type="legacy" format="cmovng op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNG" num_of_operands="2" type="legacy" format="cmovng op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNG" num_of_operands="2" type="legacy" format="cmovng op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNG" num_of_operands="2" type="legacy" format="cmovng op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNG" num_of_operands="2" type="legacy" format="cmovng op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNG" num_of_operands="2" type="legacy" format="cmovng op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNGE" num_of_operands="2" type="legacy" format="cmovnge op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNGE" num_of_operands="2" type="legacy" format="cmovnge op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNGE" num_of_operands="2" type="legacy" format="cmovnge op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNGE" num_of_operands="2" type="legacy" format="cmovnge op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNGE" num_of_operands="2" type="legacy" format="cmovnge op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNGE" num_of_operands="2" type="legacy" format="cmovnge op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNL" num_of_operands="2" type="legacy" format="cmovnl op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNL" num_of_operands="2" type="legacy" format="cmovnl op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNL" num_of_operands="2" type="legacy" format="cmovnl op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNL" num_of_operands="2" type="legacy" format="cmovnl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNL" num_of_operands="2" type="legacy" format="cmovnl op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNL" num_of_operands="2" type="legacy" format="cmovnl op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNLE" num_of_operands="2" type="legacy" format="cmovnle op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNLE" num_of_operands="2" type="legacy" format="cmovnle op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNLE" num_of_operands="2" type="legacy" format="cmovnle op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNLE" num_of_operands="2" type="legacy" format="cmovnle op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNLE" num_of_operands="2" type="legacy" format="cmovnle op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNLE" num_of_operands="2" type="legacy" format="cmovnle op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNO" num_of_operands="2" type="legacy" format="cmovno op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNO" num_of_operands="2" type="legacy" format="cmovno op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNO" num_of_operands="2" type="legacy" format="cmovno op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNO" num_of_operands="2" type="legacy" format="cmovno op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNO" num_of_operands="2" type="legacy" format="cmovno op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNO" num_of_operands="2" type="legacy" format="cmovno op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNP" num_of_operands="2" type="legacy" format="cmovnp op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNP" num_of_operands="2" type="legacy" format="cmovnp op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNP" num_of_operands="2" type="legacy" format="cmovnp op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNP" num_of_operands="2" type="legacy" format="cmovnp op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNP" num_of_operands="2" type="legacy" format="cmovnp op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNP" num_of_operands="2" type="legacy" format="cmovnp op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNS" num_of_operands="2" type="legacy" format="cmovns op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNS" num_of_operands="2" type="legacy" format="cmovns op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNS" num_of_operands="2" type="legacy" format="cmovns op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNS" num_of_operands="2" type="legacy" format="cmovns op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNS" num_of_operands="2" type="legacy" format="cmovns op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNS" num_of_operands="2" type="legacy" format="cmovns op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVNZ" num_of_operands="2" type="legacy" format="cmovnz op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVNZ" num_of_operands="2" type="legacy" format="cmovnz op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVNZ" num_of_operands="2" type="legacy" format="cmovnz op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVNZ" num_of_operands="2" type="legacy" format="cmovnz op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVNZ" num_of_operands="2" type="legacy" format="cmovnz op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVNZ" num_of_operands="2" type="legacy" format="cmovnz op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVO" num_of_operands="2" type="legacy" format="cmovo op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVO" num_of_operands="2" type="legacy" format="cmovo op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVO" num_of_operands="2" type="legacy" format="cmovo op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVO" num_of_operands="2" type="legacy" format="cmovo op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVO" num_of_operands="2" type="legacy" format="cmovo op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVO" num_of_operands="2" type="legacy" format="cmovo op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVP" num_of_operands="2" type="legacy" format="cmovp op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVP" num_of_operands="2" type="legacy" format="cmovp op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVP" num_of_operands="2" type="legacy" format="cmovp op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVP" num_of_operands="2" type="legacy" format="cmovp op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVP" num_of_operands="2" type="legacy" format="cmovp op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVP" num_of_operands="2" type="legacy" format="cmovp op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVPE" num_of_operands="2" type="legacy" format="cmovpe op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVPE" num_of_operands="2" type="legacy" format="cmovpe op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVPE" num_of_operands="2" type="legacy" format="cmovpe op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVPE" num_of_operands="2" type="legacy" format="cmovpe op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVPE" num_of_operands="2" type="legacy" format="cmovpe op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVPE" num_of_operands="2" type="legacy" format="cmovpe op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVPO" num_of_operands="2" type="legacy" format="cmovpo op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVPO" num_of_operands="2" type="legacy" format="cmovpo op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVPO" num_of_operands="2" type="legacy" format="cmovpo op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVPO" num_of_operands="2" type="legacy" format="cmovpo op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVPO" num_of_operands="2" type="legacy" format="cmovpo op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVPO" num_of_operands="2" type="legacy" format="cmovpo op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVS" num_of_operands="2" type="legacy" format="cmovs op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVS" num_of_operands="2" type="legacy" format="cmovs op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVS" num_of_operands="2" type="legacy" format="cmovs op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVS" num_of_operands="2" type="legacy" format="cmovs op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVS" num_of_operands="2" type="legacy" format="cmovs op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVS" num_of_operands="2" type="legacy" format="cmovs op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMOVZ" num_of_operands="2" type="legacy" format="cmovz op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMOVZ" num_of_operands="2" type="legacy" format="cmovz op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMOVZ" num_of_operands="2" type="legacy" format="cmovz op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMOVZ" num_of_operands="2" type="legacy" format="cmovz op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMOVZ" num_of_operands="2" type="legacy" format="cmovz op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMOVZ" num_of_operands="2" type="legacy" format="cmovz op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1" operand1="gpr_8_r" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1" operand1="gpr_16_r" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1" operand1="gpr_32_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1" operand1="gpr_64_r" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem8" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem16" operand2="u_imm16" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem32" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem64" operand2="u_imm32" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem16" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem32" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp $op2,op1(%rsp)" operand1="mem64" operand2="u_imm8" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1" operand1="gpr_8_r" operand2="gpr_8_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2(%rsp),op1" operand1="gpr_8_r" operand2="mem8" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1(%rsp)" operand1="mem8" operand2="gpr_8_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1" operand1="gpr_16_r" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2(%rsp),op1" operand1="gpr_16_r" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1(%rsp)" operand1="mem16" operand2="gpr_16_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1(%rsp)" operand1="mem32" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMP" num_of_operands="2" type="legacy" format="cmp op2,op1(%rsp)" operand1="mem64" operand2="gpr_64_r" toggle="False"> </instruction>

    <instruction name="CMPS" num_of_operands="2" type="legacy" format="cmpsc op2(%rsp),op1(%rsp)" operand1="mem8" operand2="mem8" toggle="False"> </instruction>
    <instruction name="CMPS" num_of_operands="2" type="legacy" format="cmpsw op2(%rsp),op1(%rsp)" operand1="mem16" operand2="mem16" toggle="False"> </instruction>
    <instruction name="CMPS" num_of_operands="2" type="legacy" format="cmpsl op2(%rsp),op1(%rsp)" operand1="mem32" operand2="mem32" toggle="False"> </instruction>
    <instruction name="CMPS" num_of_operands="2" type="legacy" format="cmpsq op2(%rsp),op1(%rsp)" operand1="mem64" operand2="mem64" toggle="False"> </instruction>
    <instruction name="CMPSB" num_of_operands="0" type="legacy" format="cmpsb" toggle="False"> </instruction>
    <instruction name="CMPSW" num_of_operands="0" type="legacy" format="cmpsw" toggle="False"> </instruction>
    <instruction name="CMPSD" num_of_operands="0" type="legacy" format="cmpsd" toggle="False"> </instruction>
    <instruction name="CMPSQ" num_of_operands="0" type="legacy" format="cmpsq" toggle="False"> </instruction>

    
    

    <!-- smap -->
    <instruction name="CLAC" num_of_operands="0" type="smap" format="clac" toggle="False"> </instruction>



    <!-- bmi2 -->
    <instruction name="BZHI" num_of_operands="3" type="bmi2" format="bzhi op3,op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" operand3="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BZHI" num_of_operands="3" type="bmi2" format="bzhi op3,op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" operand3="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BZHI" num_of_operands="3" type="bmi2" format="bzhi op3,op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" operand3="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BZHI" num_of_operands="3" type="bmi2" format="bzhi op3,op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" operand3="gpr_64_r" toggle="False"> </instruction>



    <!-- bmi1 -->
    <instruction name="ANDN" num_of_operands="3" type="bmi1" format="andn op3,op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" operand3="gpr_32_r" toggle="False"> </instruction>
    <instruction name="ANDN" num_of_operands="3" type="bmi1" format="andnl op3(%rsp),op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" operand3="mem32" toggle="False"> </instruction>

    <instruction name="ANDN" num_of_operands="3" type="bmi1" format="andn op3,op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" operand3="gpr_64_r" toggle="False"> </instruction>
    <instruction name="ANDN" num_of_operands="3" type="bmi1" format="andnq op3(%rsp),op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" operand3="mem64" toggle="False"> </instruction>

    <instruction name="BEXTR" num_of_operands="3" type="bmi1" format="bextr op3,op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" operand3="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BEXTR" num_of_operands="3" type="bmi1" format="bextrl op3,op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" operand3="gpr_32_r" toggle="False"> </instruction>

    <instruction name="BEXTR" num_of_operands="3" type="bmi1" format="bextr op3,op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" operand3="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BEXTR" num_of_operands="3" type="bmi1" format="bextrq op3,op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" operand3="gpr_64_r" toggle="False"> </instruction>

    <instruction name="BLSI" num_of_operands="2" type="bmi1" format="blsi op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BLSI" num_of_operands="2" type="bmi1" format="blsil op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>

    <instruction name="BLSI" num_of_operands="2" type="bmi1" format="blsi op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BLSI" num_of_operands="2" type="bmi1" format="blsiq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BLSMSK" num_of_operands="2" type="bmi1" format="blsmsk op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BLSMSK" num_of_operands="2" type="bmi1" format="blsmskl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>

    <instruction name="BLSMSK" num_of_operands="2" type="bmi1" format="blsmsk op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BLSMSK" num_of_operands="2" type="bmi1" format="blsmskq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BLSR" num_of_operands="2" type="bmi1" format="blsr op2,op1" operand1="gpr_32_r" operand2="gpr_32_r" toggle="False"> </instruction>
    <instruction name="BLSR" num_of_operands="2" type="bmi1" format="blsrl op2(%rsp),op1" operand1="gpr_32_r" operand2="mem32" toggle="False"> </instruction>

    <instruction name="BLSR" num_of_operands="2" type="bmi1" format="blsr op2,op1" operand1="gpr_64_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BLSR" num_of_operands="2" type="bmi1" format="blsrq op2(%rsp),op1" operand1="gpr_64_r" operand2="mem64" toggle="False"> </instruction>

    <!-- mpx -->
  
    <instruction name="BNDCL" num_of_operands="2" type="mpx" format="bndcl op2(%rsp),op1" operand1="bnd_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="BNDCL" num_of_operands="2" type="mpx" format="bndcl op2,op1" operand1="bnd_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BNDCL" num_of_operands="2" type="mpx" format="bndcl op2(%rsp),op1" operand1="bnd_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BNDCU" num_of_operands="2" type="mpx" format="bndcu op2(%rsp),op1" operand1="bnd_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="BNDCU" num_of_operands="2" type="mpx" format="bndcu op2,op1" operand1="bnd_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BNDCU" num_of_operands="2" type="mpx" format="bndcu op2(%rsp),op1" operand1="bnd_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BNDCN" num_of_operands="2" type="mpx" format="bndcn op2(%rsp),op1" operand1="bnd_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="BNDCN" num_of_operands="2" type="mpx" format="bndcn op2,op1" operand1="bnd_r" operand2="gpr_64_r" toggle="False"> </instruction>
    <instruction name="BNDCN" num_of_operands="2" type="mpx" format="bndcn op2(%rsp),op1" operand1="bnd_r" operand2="mem64" toggle="False"> </instruction>

    <!-- bndldx bnd, [base + index*scale + dis]      foo(%ebx,%eax,4) = %ebx + %eax*4 + foo   -->

    <instruction name="BNDMK" num_of_operands="2" type="mpx" format="bndmk op2(%rsp),op1" operand1="bnd_r" operand2="mem32" toggle="False"> </instruction>
    <instruction name="BNDMK" num_of_operands="2" type="mpx" format="bndmk op2(%rsp),op1" operand1="bnd_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="BNDMOV" num_of_operands="2" type="mpx" format="bndmov op2(%rsp),op1" operand1="bnd_r" operand2="bnd_r" toggle="False"> </instruction>
    <instruction name="BNDMOV" num_of_operands="2" type="mpx" format="bndmov op2(%rsp),op1" operand1="bnd_r" operand2="mem64" toggle="False"> </instruction>
    <instruction name="BNDMOV" num_of_operands="2" type="mpx" format="bndmov op2(%rsp),op1" operand1="bnd_r" operand2="mem128" toggle="False"> </instruction>
    <instruction name="BNDMOV" num_of_operands="2" type="mpx" format="bndmov op2,op1(%rsp)" operand1="mem64" operand2="bnd_r" toggle="False"> </instruction>
    <instruction name="BNDMOV" num_of_operands="2" type="mpx" format="bndmov op2,op1(%rsp)" operand1="mem128" operand2="bnd_r" toggle="False"> </instruction>

    <!-- bndsdx  [base + index*scale + dis], bnd      foo(%ebx,%eax,4) = %ebx + %eax*4 + foo   -->



    <!-- aes -->
    <instruction name="AESDEC" num_of_operands="2" type="aes" format="aesdec op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="AESDEC" num_of_operands="2" type="aes" format="aesdec op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="AESDECLAST" num_of_operands="2" type="aes" format="aesdeclast op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="AESDECLAST" num_of_operands="2" type="aes" format="aesdeclast op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="AESENC" num_of_operands="2" type="aes" format="aesenc op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="AESENC" num_of_operands="2" type="aes" format="aesenc op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="AESENCLAST" num_of_operands="2" type="aes" format="aesenclast op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="AESENCLAST" num_of_operands="2" type="aes" format="aesenclast op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="AESIMC" num_of_operands="2" type="aes" format="aesimc op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="AESIMC" num_of_operands="2" type="aes" format="aesimc op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="AESKEYGENASSIST" num_of_operands="3" type="aes" format="aeskeygenassist $op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="AESKEYGENASSIST" num_of_operands="3" type="aes" format="aeskeygenassist $op3,op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" operand3="u_imm8" toggle="False"> </instruction>



    <instruction name="VAESDEC" num_of_operands="3" type="aesavx" format="vaesdec op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VAESDEC" num_of_operands="3" type="aesavx" format="vaesdec op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>

    <instruction name="VAESDECLAST" num_of_operands="3" type="aesavx" format="vaesdeclast op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VAESDECLAST" num_of_operands="3" type="aesavx" format="vaesdeclast op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>

    <instruction name="VAESENC" num_of_operands="3" type="aesavx" format="vaesenc op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VAESENC" num_of_operands="3" type="aesavx" format="vaesenc op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>

    <instruction name="VAESENCLAST" num_of_operands="3" type="aesavx" format="vaesenclast op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VAESENCLAST" num_of_operands="3" type="aesavx" format="vaesenclast op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>

    <instruction name="VAESIMC" num_of_operands="2" type="aesavx" format="vaesimc op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VAESIMC" num_of_operands="2" type="aesavx" format="vaesimc op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" toggle="False"> </instruction>


    <!--
    <instruction name="VAESDEC" num_of_operands="3" type="vaes" format="vaesdec op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VAESDEC" num_of_operands="3" type="vaes" format="vaesdec op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>
  
    <instruction name="VAESDECLAST" num_of_operands="3" type="vaes" format="vaesdeclast op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VAESDECLAST" num_of_operands="3" type="vaes" format="vaesdeclast op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VAESENC" num_of_operands="3" type="vaes" format="vaesenc op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VAESENC" num_of_operands="3" type="vaes" format="vaesenc op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VAESENCLAST" num_of_operands="3" type="vaes" format="vaesenclast op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VAESENCLAST" num_of_operands="3" type="vaes" format="vaesenclast op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>
    -->

    <instruction name="VAESKEYGENASSIST" num_of_operands="3" type="vaes" format="vaeskeygenassist $op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="VAESKEYGENASSIST" num_of_operands="3" type="vaes" format="vaeskeygenassist $op3,op2(%rsp),op1" operand1="avx_xmm_r" operand2="mem128" operand3="u_imm8" toggle="False"> </instruction>


    <!-- sse -->
    <instruction name="ADDPS" num_of_operands="2" type="sse" format="addps op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ADDPS" num_of_operands="2" type="sse" format="addpd op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="ADDSS" num_of_operands="2" type="sse" format="addss op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ADDSS" num_of_operands="2" type="sse" format="addss op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem32" toggle="False"> </instruction>

    <instruction name="ANDPS" num_of_operands="2" type="sse" format="andps op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ANDPS" num_of_operands="2" type="sse" format="andps op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="CMPPS" num_of_operands="3" type="sse" format="cmpps $op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r"  operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="CMPPS" num_of_operands="3" type="sse" format="cmpps $op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" operand3="u_imm8" toggle="False"> </instruction>

    <instruction name="CMPSS" num_of_operands="3" type="sse" format="cmpss $op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r"  operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="CMPSS" num_of_operands="3" type="sse" format="cmpss $op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem32" operand3="u_imm8" toggle="False"> </instruction>


    <!-- sse2 -->
    <instruction name="ADDPD" num_of_operands="2" type="sse2" format="addpd op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ADDPD" num_of_operands="2" type="sse2" format="addpd op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="ADDSD" num_of_operands="2" type="sse2" format="addsd op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ADDSD" num_of_operands="2" type="sse2" format="addsd op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem64" toggle="False"> </instruction>

    <instruction name="ANDPD" num_of_operands="2" type="sse2" format="andpd op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ANDPD" num_of_operands="2" type="sse2" format="andpd op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="ANDNPD" num_of_operands="2" type="sse2" format="andnpd op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ANDNPD" num_of_operands="2" type="sse2" format="andnpd op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="ANDNPS" num_of_operands="2" type="sse2" format="andnps op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ANDNPS" num_of_operands="2" type="sse2" format="andnps op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="CMPPD" num_of_operands="3" type="sse2" format="cmppd $op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r"  operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="CMPPD" num_of_operands="3" type="sse2" format="cmppd $op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" operand3="u_imm8" toggle="False"> </instruction>
    
    <instruction name="CMPSD" num_of_operands="3" type="sse2" format="cmpsd $op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r"  operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="CMPSD" num_of_operands="3" type="sse2" format="cmpsd $op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem64" operand3="u_imm8" toggle="False"> </instruction>


    <!-- sse3 -->
    <instruction name="ADDSUBPD" num_of_operands="2" type="sse3" format="addsubpd op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ADDSUBPD" num_of_operands="2" type="sse3" format="addsubpd op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>

    <instruction name="ADDSUBPS" num_of_operands="2" type="sse3" format="addsubps op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" toggle="False"> </instruction>
    <instruction name="ADDSUBPS" num_of_operands="2" type="sse3" format="addsubps op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" toggle="False"> </instruction>



    <!-- sse41 -->
    <instruction name="BLENDPD" num_of_operands="3" type="sse41" format="blendpd $op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="BLENDPD" num_of_operands="3" type="sse41" format="blendpd $op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" operand3="u_imm8" toggle="False"> </instruction>

    <instruction name="BLENDPS" num_of_operands="3" type="sse41" format="blendps $op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" operand3="u_imm8" toggle="False"> </instruction>
    <instruction name="BLENDPS" num_of_operands="3" type="sse41" format="blendps $op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" operand3="u_imm8" toggle="False"> </instruction>

    <instruction name="BLENDVPD" num_of_operands="3" type="sse41" format="blendvpd op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" operand3="xmm0_r" toggle="False"> </instruction>
    <instruction name="BLENDVPD" num_of_operands="3" type="sse41" format="blendvpd op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" operand3="xmm0_r" toggle="False"> </instruction>

    <instruction name="BLENDVPS" num_of_operands="3" type="sse41" format="blendvps op3,op2,op1" operand1="sse_xmm_r" operand2="sse_xmm_r" operand3="xmm0_r" toggle="False"> </instruction>
    <instruction name="BLENDVPS" num_of_operands="3" type="sse41" format="blendvps op3,op2(%rsp),op1" operand1="sse_xmm_r" operand2="mem128" operand3="xmm0_r" toggle="False"> </instruction>

    <!-- AVX -->
    <instruction name="VADDPD" num_of_operands="3" type="avx" format="vaddpd op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VADDPD" num_of_operands="3" type="avx" format="vaddpd op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VADDPD" num_of_operands="3" type="avx" format="vaddpd op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VADDPD" num_of_operands="3" type="avx" format="vaddpd op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>
    
    <instruction name="VADDPDS" num_of_operands="3" type="avx" format="vaddps op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VADDPDS" num_of_operands="3" type="avx" format="vaddps op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VADDPDS" num_of_operands="3" type="avx" format="vaddps op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VADDPDS" num_of_operands="3" type="avx" format="vaddps op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VADDSD" num_of_operands="3" type="avx" format="vaddsd op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VADDSD" num_of_operands="3" type="avx" format="vaddsd op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem64" toggle="False"> </instruction>
    
    <instruction name="VADDSS" num_of_operands="3" type="avx" format="vaddss op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VADDSS" num_of_operands="3" type="avx" format="vaddss op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem32" toggle="False"> </instruction>

    <instruction name="VADDSUBPD" num_of_operands="3" type="avx" format="vaddsubpd op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VADDSUBPD" num_of_operands="3" type="avx" format="vaddsubpd op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VADDSUBPD" num_of_operands="3" type="avx" format="vaddsubpd op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VADDSUBPD" num_of_operands="3" type="avx" format="vaddsubpd op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VADDSUBPS" num_of_operands="3" type="avx" format="vaddsubps op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VADDSUBPS" num_of_operands="3" type="avx" format="vaddsubps op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VADDSUBPS" num_of_operands="3" type="avx" format="vaddsubps op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VADDSUBPS" num_of_operands="3" type="avx" format="vaddsubps op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VANDPD" num_of_operands="3" type="avx" format="vandpd op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VANDPD" num_of_operands="3" type="avx" format="vandpd op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VANDPD" num_of_operands="3" type="avx" format="vandpd op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VANDPD" num_of_operands="3" type="avx" format="vandpd op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VANDPS" num_of_operands="3" type="avx" format="vandps op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VANDPS" num_of_operands="3" type="avx" format="vandps op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VANDPS" num_of_operands="3" type="avx" format="vandps op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VANDPS" num_of_operands="3" type="avx" format="vandps op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VANDNPD" num_of_operands="3" type="avx" format="vandnpd op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VANDNPD" num_of_operands="3" type="avx" format="vandnpd op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VANDNPD" num_of_operands="3" type="avx" format="vandnpd op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VANDNPD" num_of_operands="3" type="avx" format="vandnpd op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VANDNPS" num_of_operands="3" type="avx" format="vandnps op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VANDNPS" num_of_operands="3" type="avx" format="vandnps op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" toggle="False"> </instruction>
    <instruction name="VANDNPS" num_of_operands="3" type="avx" format="vandnps op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VANDNPS" num_of_operands="3" type="avx" format="vandnps op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" toggle="False"> </instruction>

    <instruction name="VBLENDPD" num_of_operands="4" type="avx" format="vblendpd $op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VBLENDPD" num_of_operands="4" type="avx" format="vblendpd $op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VBLENDPD" num_of_operands="4" type="avx" format="vblendpd $op4,op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VBLENDPD" num_of_operands="4" type="avx" format="vblendpd $op4,op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" operand4="u_imm8" toggle="False"> </instruction>

    <instruction name="VBLENDPS" num_of_operands="4" type="avx" format="vblendps $op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VBLENDPS" num_of_operands="4" type="avx" format="vblendps $op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VBLENDPS" num_of_operands="4" type="avx" format="vblendps $op4,op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VBLENDPS" num_of_operands="4" type="avx" format="vblendps $op4,op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" operand4="u_imm8" toggle="False"> </instruction>

    <instruction name="VBLENDVPD" num_of_operands="4" type="avx" format="vblendvpd op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VBLENDVPD" num_of_operands="4" type="avx" format="vblendvpd op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" operand4="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VBLENDVPD" num_of_operands="4" type="avx" format="vblendvpd op4,op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" operand4="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VBLENDVPD" num_of_operands="4" type="avx" format="vblendvpd op4,op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" operand4="avx_ymm_r" toggle="False"> </instruction>

    <instruction name="VBLENDVPS" num_of_operands="4" type="avx" format="vblendvps op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VBLENDVPS" num_of_operands="4" type="avx" format="vblendvps op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem128" operand4="avx_xmm_r" toggle="False"> </instruction>
    <instruction name="VBLENDVPS" num_of_operands="4" type="avx" format="vblendvps op4,op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" operand4="avx_ymm_r" toggle="False"> </instruction>
    <instruction name="VBLENDVPS" num_of_operands="4" type="avx" format="vblendvps op4,op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" operand4="avx_ymm_r" toggle="False"> </instruction>

    <instruction name="VCMPPD" num_of_operands="4" type="avx" format="vcmppd $op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPPD" num_of_operands="4" type="avx" format="vcmppd $op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem256" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPPD" num_of_operands="4" type="avx" format="vcmppd $op4,op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPPD" num_of_operands="4" type="avx" format="vcmppd $op4,op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" operand4="u_imm8" toggle="False"> </instruction>

    <instruction name="VCMPPS" num_of_operands="4" type="avx" format="vcmpps $op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPPS" num_of_operands="4" type="avx" format="vcmpps $op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem256" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPPS" num_of_operands="4" type="avx" format="vcmpps $op4,op3,op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="avx_ymm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPPS" num_of_operands="4" type="avx" format="vcmpps $op4,op3(%rsp),op2,op1" operand1="avx_ymm_r" operand2="avx_ymm_r" operand3="mem256" operand4="u_imm8" toggle="False"> </instruction>

    <instruction name="VCMPSD" num_of_operands="4" type="avx" format="vcmpsd $op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPSD" num_of_operands="4" type="avx" format="vcmpsd $op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem64" operand4="u_imm8" toggle="False"> </instruction>

    <instruction name="VCMPSS" num_of_operands="4" type="avx" format="vcmpss $op4,op3,op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="avx_xmm_r" operand4="u_imm8" toggle="False"> </instruction>
    <instruction name="VCMPSS" num_of_operands="4" type="avx" format="vcmpss $op4,op3(%rsp),op2,op1" operand1="avx_xmm_r" operand2="avx_xmm_r" operand3="mem32" operand4="u_imm8" toggle="False"> </instruction>



  </instructions>
</GA_inputs>